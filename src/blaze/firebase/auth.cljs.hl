(ns blaze.firebase.auth
  (:require [cljsjs.firebase]
            [firebase-cljs.core :as fb]
            [firebase-cljs.auth :as fbauth]
            [firebase-cljs.auth.error :as fbautherr]
            [firebase-cljs.auth.provider :as fbprov]
            [blaze.firebase :as bfb]))

(def ^:dynamic *facebook* (fbprov/facebook))

(def ^:dynamic *github* (fbprov/github))

(def ^:dynamic *google* (fbprov/google))

(def ^:dynamic *twitter* (fbprov/twitter))

(fbprov/scope-email *google* :google)
(fbprov/scope-email *github* :github)
(fbprov/scope-email *facebook* :facebook)

(fbprov/scope-profile *google* :google)
(fbprov/scope-profile *github* :github)
(fbprov/scope-profile *facebook* :facebook)

(def ^:dynamic *pending-link* (cell nil))

(defn- handle-link
  [err]
  (let [cred (aget err "credential")
        email (aget err "email")
        pending {:cred cred :email email}]
    (.then
      (fbauth/providers-by-email bfb/*auth* email)
      #(reset! *pending-link*
        (assoc pending
          :providers (set %)
          :msg (fbautherr/message err))))))

(defn login!
  [provider & [auth]]
  (.catch
    (fbauth/login-popup (or auth bfb/*auth*) provider)
    #(case (keyword (fbautherr/code %))
      :auth/account-exists-with-different-credential (handle-link %)
      (throw (fbautherr/message %)))))

(defn logout! [& [auth]]
  (fbauth/logout (or auth bfb/*auth*)))

(defmethod do! :login
  [elem _ v]
  (do! :click #(login! v)))
