(ns blaze.mdl
  (:refer-hoplon :exclude [footer])
  (:require [material-hl.core :as mdl]
            [material-hl.buttons :as btn]
            [material-hl.cards :as card]
            [material-hl.grid :as grid]
            [material-hl.navigation :as nav]
            [material-hl.footer :as footer]
            [blaze.core :as blz]))

(defn bg-image [image]
  (str "url('" image "')"))

(defelem bottom-nav [attr kids]
  (grid/cell attr
    (div :class [:section-spacer])
    (a :class [:demo-nav__button]
      (btn/button :class [:demo]))))

(def ^:dynamic *about-title* nil)
(def ^:dynamic *about-image* nil)

(defelem about-card [attr kids]
  (let [title (:title attr *about-title*)
        image (:image attr *about-image*)]
    (grid/cell-card attr
      (card/card-media :css (cell= {:background-image (bg-image image)}))
      (card/card-supporting-text :class [:meta :meta--fill]
        (strong (text "~{title}"))))))

(def ^:dynamic *featured-title* nil)
(def ^:dynamic *featured-image* nil)
(def ^:dynamic *featured-color* nil)

(defelem featured-card [attr kids]
  (let [title (:title attr *featured-title*)
        image (:image attr *featured-image*)
        color (:color attr *featured-color*)
        router (:router attr blz/*router*)]
    (grid/cell-card
      attr
      (card/card-media
        :class [:mdl-color-text--grey-50]
        :css (cell= {:background-image (bg-image image) :background-color color})
        (h3 (text "~{title}")))
      (card/card-supporting-text :class [:meta :meta--fill]
        ))))

(defelem preview-card [attr kids]
  (let []
    (grid/cell-card
      (card/card-media)
      (card/card-supporting-text :class [:meta :meta--fill]))))

(def ^:dynamic *links* nil)

(defelem navigation [attr kids]
  (let [links (or (:links attr) blz/*navigation*)
        router (or (:router attr) blz/*router*)]
    (nav/navigation
      attr
      (for-tpl [l links]
        (nav/nav-link
          :click #(router (first @l))
          (text "~{(second l)}")))
      kids)))

(def ^:dynamic *list-title* nil)
(def ^:dynamic *list-items* nil)

(defelem list-card-item [attr kids]
  (let [meta (:meta-header attr)
        desc (:meta-description attr)]
    (div :class [:mdl-card__list-item :mdl-color-text--grey-600]
      (div :class [:meta]
        (div :class [:minilogo] :style {:background-image (:avatar attr)})
        (div
          (strong (text "~{meta}"))
          (span (text "~{desc}"))))
      (a :click (:click attr)
        (h5 :class [:mdl-color-text--grey-600]
          kids)))))

(defelem list-card [attr kids]
  (let [items (:items attr *list-items*)
        title (:title attr *list-title*)
        router (:router attr blz/*router*)]
    (grid/cell-card
      (card/card-media :class [:mdl-color-text--grey-50]
        (h3 (text "~{title}")))
      (for-tpl [i items]
        (let [item (cell= (second i))
              title (cell= (:title item))]
            (list-card-item
              :click #(router (first @i))
              :meta-header (cell= (:header (:meta item) ""))
              :meta-description (cell= (:desc (:meta item) ""))
              :avatar (cell= (:icon item "../images/avatar.png"))
              (text "~{title}")))
          ))))

(defelem post-card [attr kids]
  (let [post (:items attr blz/*current-post*)]
    (grid/cell-card
      (card/card-media :class [:mdl-color-text--grey-50]
        (h3 (text "~{(:title post)}")))
      (card/card-supporting-text :class [:meta])
      (card/card-supporting-text
        (text "~{(:content post)}"))
      (card/card-supporting-text :class [:comments]))))

(def ^:dynamic *copyright* nil)
(def ^:dynamic *social-links* nil)

(defelem footer [attr kids]
  (let [copyright (:copyright attr *copyright*)
        social (:social-links attr *social-links*)]
    (footer/mini-footer
      (footer/mini-footer-left
        (footer/footer-logo)
        (for-tpl [[icon url] social]
          (a :href (cell= url)
            (footer/mini-footer-social-button
              :icon true
              :class (cell= [:social-btn (keyword (str "social-btn__" (name icon)))])))))
      (footer/mini-footer-right
        (span (text "Â© ~{copyright}"))))))
