(ns blaze.mdl
  (:require [material-hl.core :as mdl]
            [material-hl.cards :as card]
            [material-hl.grid :as grid]
            [material-hl.navigation :as nav]
            [blaze.core :as blz]
            [blaze.bidi :as bidi]))

(defelem about-card [attr kids]
  (grid/cell-card :desktop-cols 4))

(defelem feature-card [attr kids]
  (grid/cell-card :desktop-cols 8))

(defelem post-card [attr kids]
  (grid/cell-card))

(def ^:dynamic *links* nil)

(defelem navigation [attr kids]
  (let [links (or (:links attr) *links*)
        prefix (or (:prefix attr) bidi/*prefix*)
        router (or (:router attr) blz/*router*)]
    (nav/navigation
      attr
      (for-tpl [l links]
        (nav/nav-link
          :click #(router (first @l) :prefix prefix)
          (text "~{(second l)}")))
      kids)))

(def ^:dynamic *title* nil)

(def ^:dynamic *items* nil)

(defelem list-card-item [attr kids]
  (let [prefix (or (:prefix attr) bidi/*prefix*)]
    (div :class [:mdl-card__list-item :mdl-color-text--grey-600]
      (div :class [:meta]
        (div :class [:minilogo])
        (div
          (strong (:meta attr))
          (span (:meta-description attr))))
      (a :click (:click attr)
        (h5 :class [:mdl-color-text--grey-600]
          kids)))))

(defelem list-card [attr kids]
  (let [items (or (:items attr) *items*)
        prefix (or (:prefix attr) bidi/*prefix*)
        title (or (:title attr) *title*)
        route (or (:router attr) blz/*route*)
        router (or (:router attr) blz/*router*)]
    (grid/cell-card
      (card/card-media
        :class [:mdl-color-text--grey-50]
        (h3 (text "~{title}")))
      (for-tpl [i items]
        (if (map? (second @i))
          (let [item (second @i)
                meta (:author item)
                desc (:created item)
                title (:title item)
                route (route)]
            (list-card-item
              :click #(router route :id (first @i) :prefix prefix)
              :meta meta
              :meta-description desc
              title))
          (list-card-item
            :click #(prn (route));#(router route :id (first @i) :prefix prefix)
            (text "~{(second i)}")))))))
