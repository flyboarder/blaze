(ns blaze.firebase
  (:require [blaze.core :as blz]
            [firebase-cljs.core :as fb]
            [firebase-cljs.database :as fbdb]
            [firebase-cljs.database.query :as fbdq]
            [firebase-cljs.database.datasnapshot :as fbsnap]
            [firebase-cljs.user :as fbuser]
            [hoplon.firebase :as hfb]))

;; Firebase Root ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def ^:dynamic *blaze*   (hfb/fb-ref [:_blaze]))

;; Firebase Public References ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn post []
  (hfb/fb-ref *blaze* [:post :content]))

(defn current-content=
  [& [route-params]]
  (let [route-params (or route-params blz/*route-params*)
        fbc (cell nil)]
    (cell=
      (when (:id route-params)
        (fbdb/listen-once
          (fbdb/get-in (post) (:id route-params))
          "value"
          ~#(reset! fbc (hfb/fb->clj %)))))
    (cell= fbc #(fbdb/reset! (fbdb/get-in (post) (:id @route-params)) %))))

(defn posts
  [] (hfb/fb-ref *blaze* [:posts :meta]))

(defn posts=
  [] (hfb/fb-cell (-> (posts) (fbdq/take 25))))

(defn posts-featured=
  [] (hfb/fb-cell (-> (posts) (fbdq/sort-by :child "featured") (fbdq/take-last 1))))

(defn current-meta=
  [& [route-params db]]
  (let [route-params (or route-params blz/*route-params*)
        fbc (cell nil)]
    (cell=
      (when (:id route-params)
        (fbdb/listen-once
          (fbdb/get-in (posts) (:id route-params))
          "value"
          ~#(reset! fbc (hfb/fb->clj %)))))
    (cell= fbc)))

(defn post=
  [& [route-params db]]
  (cell=
    (assoc ~(current-meta= route-params db)
      :content ~(current-content= route-params db))))

(defn settings
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:settings]))

(defn settings=
  [& [db]]
  (hfb/fb-cell (settings db)))

(defn categories
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:categories]))

(defn categories=
  [& [db]]
  (hfb/fb-cell (categories db)))

(defn tags
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:tags]))

(defn tags=
  [& [db]]
  (hfb/fb-cell (tags db)))

(defn pages
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:pages]))

(defn pages=
  [& [db]]
  (hfb/fb-cell (pages db)))

(defn navigation
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:navigation]))

(defn navigation=
  [& [db]]
  (hfb/fb-cell (navigation db)))

(defn users
  [& [db]]
  (hfb/fb-ref (or db *blaze*) [:users]))

(defn users=
  [& [db]]
  (hfb/fb-cell (users db)))

;; Firebase Cells ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def ^:dynamic *user-auth* (cell nil))

(def ^:dynamic *user-fb* (cell nil))

(defn- handle-login
  [auth]
  ;; Store auth data in cell
  (reset! *user-auth* auth)
  ;; Persist auth data to db
  ;(hfb/fb-default (users (fbuser/uid auth)) {:enabled true})
  ;; Listen to user ref
  ;(hfb/fb-update (users (fbuser/uid auth)) *user-fb*)
  )

(defn- handle-logout
  []
  (prn "Logout!"))
