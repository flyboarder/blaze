(ns blaze.firebase
  (:require [blaze.core :as blz]
            [firebase-cljs.core :as fb]
            [firebase-cljs.database :as fbdb]
            [firebase-cljs.database.query :as fbdq]
            [firebase-cljs.database.datasnapshot :as fbsnap]
            [firebase-cljs.user :as fbuser]
            [hoplon.firebase :as hfb]))

;; Firebase Root ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def ^:dynamic *blaze*   (hfb/fb-ref [:_blaze]))

;; Firebase Public References ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn posts
  ([] (hfb/fb-ref *blaze* [:posts]))
  ([korks] (fbdb/get-in (posts) korks)))

(defn post-content=
  [& [route-params]]
  (let [route-params (or route-params blz/*route-params*)
        fbc (cell nil)]
    (cell=
      (when (:id route-params)
        (fbdb/listen-once
          (posts [:content (keyword (:id route-params))])
          "value"
          ~#(reset! fbc (hfb/fb->clj %)))))
    (cell= fbc)))

(defn posts=
  ([] (hfb/fb-cell (-> (posts [:meta]) (fbdq/take 25)))))

(defn posts-featured=
  [] (hfb/fb-cell (-> (posts) (fbdq/sort-by :child "featured") (fbdq/take-last 1))))

;(defn post-meta=
;  [& [route-params]]
;  (let [route-params (or route-params blz/*route-params*)
;        fbc (cell nil)]
;    (cell=
;      (when (:id route-params)
;        (fbdb/listen-once
;          (posts [:meta (keyword (:id @route-params))])
;          "value"
;          ~#(reset! fbc (hfb/fb->clj %)))))
;    (cell= fbc #(fbdb/reset! (posts [(keyword (:id @route-params))]) %))))

(defn post=
  [& [route-params]]
  (cell-let [route-params (or route-params blz/*route-params*)
             metac        (cell=
                            (when-let [postid (:id route-params)
                                       postref (posts [:meta (keyword postid)])
                                       fbc (cell nil)]
                              (fbdb/listen-once
                                postref
                                "value"
                                ~#(reset! fbc (hfb/fb->clj %)))))
             contentc     (cell=
                            (when (:id route-params)
                              (fbdb/listen-once
                                (posts [:content (keyword (:id route-params))])
                                "value"
                                ~#(reset! contentc (hfb/fb->clj %)))))]

    (cell= (assoc metac :content contentc))))

(defn settings
  [] (hfb/fb-ref *blaze* [:settings]))

(defn settings=
  [] (hfb/fb-cell (settings)))

(defn categories
  [] (hfb/fb-ref *blaze* [:categories]))

(defn categories=
  [] (hfb/fb-cell (categories)))

(defn tags
  [] (hfb/fb-ref *blaze* [:tags]))

(defn tags=
  []
  (hfb/fb-cell (tags)))

(defn pages
  [] (hfb/fb-ref *blaze* [:pages]))

(defn pages=
  [] (hfb/fb-cell (pages)))

(defn navigation
  [] (hfb/fb-ref *blaze* [:navigation]))

(defn navigation=
  [] (hfb/fb-cell (navigation)))

(defn users
  [] (hfb/fb-ref *blaze* [:users]))

(defn users=
  [] (hfb/fb-cell (users)))

;; Firebase Cells ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def ^:dynamic *user-auth* (cell nil))

(def ^:dynamic *user-fb* (cell nil))

(defn- handle-login
  [auth]
  ;; Store auth data in cell
  (reset! *user-auth* auth)
  ;; Persist auth data to db
  ;(hfb/fb-default (users (fbuser/uid auth)) {:enabled true})
  ;; Listen to user ref
  ;(hfb/fb-reset! (users (fbuser/uid auth)) *user-fb*)
  )

(defn- handle-logout
  []
  (prn "Logout!"))
