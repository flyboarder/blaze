(page "index.html"
  (:require [material-hl.core :as mdl]
            [material-hl.buttons :as btn]
            [material-hl.layout :as layout]
            [material-hl.grid :as grid]
            [material-hl.cards :as card]
            [blaze.bidi :as bidi]
            [blaze.mdl :as bmdl][blaze.core :as blz]
            [blaze.firebase :as fb]
            [hoplon.firebase :as hfb]
            [firebase-cljs.database :as fbdb])
  (:require-macros [hoplon.firebase :refer [with-auth!]]
                   [hoplon.bidi :refer [route-tpl]]
                   [blaze.core :refer [config]]))

;; Index Page
(html
  (head
    ;; MDL Font Roboto
    (mdl/include-fonts)

    ;; MDL Icons
    (mdl/include-icons)

    ;; MDL Colors
    (mdl/include-colors :grey :orange)

    ;; Custom CSS
    (link :rel "stylesheet" :href "css/demo.css")

    ;; Title
    (title "Blaze - A (No Backend) Blog")

    ;; Default HTML Meta
    (html-meta :charset "utf-8")
    (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"))
  (body
    ;; App Settings // Sugar for binding & let
    (config [prefix           bidi/*prefix*       ""
             router           blz/*router*        bidi/route!
             route            blz/*route*         (bidi/route)
             route-params     blz/*route-params*  (bidi/route-params)
             categories       blz/*categories*    (fb/categories=)
             posts            blz/*posts*         (fb/posts=)
             nil              blz/*navigation*    (fb/navigation=)
             nil              blz/*settings*      (fb/settings=)
             nil              blz/*featured-post* (fb/posts-featured=)
             width-cols       nil                 12
             shadow           nil                 2
             featured-post    nil                 (cell= (first (seq blz/*featured-post*)))
             general-settings nil                 (cell= (:general blz/*settings*))
             social-settings  nil                 (cell= (:social blz/*settings*))
             about-settings   nil                 (cell= (-> blz/*settings* :cards :about))
             featured-id      nil                 (cell= (first featured-post))
             featured-meta    nil                 (cell= (second featured-post))
             featured-router  nil                 #(router :post :id @featured-id :prefix prefix)
             post-router      nil                 #(router :post :id % :prefix prefix)
             nav-router       nil                 #(router % :prefix prefix)
             category-router  nil                 #(router :category :id % :prefix prefix)]
        ;; MDL Layout
        (layout/layout
          :class [:demo-blog :demo-blog--blogpost]
          ;; MDL Header
          (layout/layout-header
            :scroll true
            :transparent true
            (layout/header-row
              ;; Nav Back Button
              (if-tpl (cell= (not= route :index))
                (bmdl/nav-backward :class [:demo-back]
                  :href "#"))
              (layout/layout-spacer)
              (bmdl/navigation :router nav-router)))
          ;; MDL Drawer
          (layout/layout-drawer
            (bmdl/navigation :router nav-router))
          ;; MDL Content
          (layout/layout-content
            ;; Route Templating (each view is an individual thread, ie. local bindings)
            (route-tpl (bidi/routes)
              ;; Landing View
              :index
                (config [nil grid/*cols*           width-cols
                         nil grid/*shadow*         shadow
                         nil blz/*router*          router
                         nil bmdl/*about-title*    (cell= (:title about-settings))
                         nil bmdl/*about-image*    (cell= (:image about-settings))
                         nil bmdl/*featured-title* (cell= (:title featured-meta))
                         nil bmdl/*featured-image* (cell= (:image featured-meta))
                         nil bmdl/*featured-color* (cell= (:color featured-meta))
                         nil bmdl/*featured-meta*  (cell= {:header (:header featured-meta) :desc (:desc featured-meta)})]
                  (grid/grid :class [:demo-blog__posts]
                    (bmdl/about-card :desktop-cols 4)
                    (bmdl/featured-card :desktop-cols 8
                      :click featured-router)
                    (for-tpl [post (cell= (take 2 posts))]
                      (config [nil grid/*cols*           width-cols
                               nil grid/*shadow*         shadow
                               nil bmdl/*preview-id* (cell= (-> post first))
                               nil bmdl/*preview-title* (cell= (-> post second :title))
                               nil bmdl/*preview-image* (cell= (-> post second :image))
                               nil bmdl/*preview-color* (cell= (-> post second :color))
                               nil bmdl/*preview-meta* (cell= {:header (-> post second :header) :desc (-> post second :desc)})]
                        (bmdl/preview-card
                          :router #(router :post :id % :prefix prefix))))
                    (bmdl/bottom-nav :class [:demo-nav]
                      (div :class [:section-spacer])
                      (bmdl/nav-forward :class [:demo-nav__button]
                        :href "#/posts"))))
              ;; Categories View
              :categories
                (config [nil grid/*cols*       width-cols
                         nil grid/*shadow*     shadow
                         nil blz/*router*      category-router
                         nil bmdl/*list-title* "Categories:"
                         nil bmdl/*list-items* categories]
                    (grid/grid :class [:demo-blog__list]
                      (bmdl/list-card)))
              ;; Category View
              :category
                (config [nil grid/*cols*   width-cols
                         nil grid/*shadow* shadow]
                  (grid/grid :class [:demo-blog__posts]
                    (bmdl/bottom-nav :class [:demo-nav]
                      (bmdl/nav-backward :class [:demo-nav__button]
                        :href "#/categories")
                      (div :class [:section-spacer]))))
              ;; Posts View
              :posts
                (config [nil grid/*cols*       width-cols
                         nil grid/*shadow*     shadow
                         nil blz/*router*      post-router
                         nil bmdl/*list-title* "All Posts:"
                         nil bmdl/*list-items* posts]
                  (grid/grid :class [:demo-blog__list]
                    (bmdl/list-card)))
              ;; Post View
              :post
                (config [nil grid/*cols*        width-cols
                         nil grid/*shadow*      shadow
                         nil blz/*current-post* (fb/current-post= route-params)]
                  (grid/grid :class [:demo-blog__posts]
                    (bmdl/post-card)
                    (bmdl/bottom-nav :class [:demo-nav]
                      (bmdl/nav-backward :class [:demo-nav__button]
                        :href "#/posts")
                      (div :class [:section-spacer])))))
          ;; MDL Footer
          (config [nil bmdl/*copyright*    (cell= (:copyright general-settings))
                   nil bmdl/*social-links* (cell= social-settings)]
            (bmdl/footer)))))))
