(page "index.html"
  (:require [material-hl.core :as mdl]
            [material-hl.layout :as layout]
            [material-hl.navigation :as nav]
            [material-hl.grid :as grid]
            [material-hl.footer :as footer]
            [material-hl.cards :as card]
            [blaze.core :as blz]
            [hoplon.firebase :as hfb]
            [blaze.firebase :as fb]
            [firebase-cljs.database :as fbdb]
            [blaze.bidi :as bidi]
            [blaze.mdl :as bmdl])
  (:require-macros [hoplon.firebase :refer [with-auth!]]
                   [hoplon.bidi :refer [route-tpl]]))

;; Index Page
(html
  (head
    ;; MDL Font Roboto
    (mdl/include-fonts)

    ;; MDL Icons
    (mdl/include-icons)

    ;; MDL Colors
    (mdl/include-colors :grey :orange)

    ;; Custom CSS
    (link :rel "stylesheet" :href "css/demo.css")

    ;; Title
    (title "Blaze - A (No Backend) Blog")

    ;; Default HTML Meta
    (html-meta :charset "utf-8")
    (html-meta :http-equiv "X-UA-Compatible" :content "IE=edge,chrome=1")
    (html-meta :name "viewport" :content "width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1"))
  (body
    ;; App Settings // Thread Bindings (available only on first thread)
    (binding [blaze.bidi/*prefix* ""
              blaze.core/*route-params* (bidi/route-params)
              blaze.core/*navigation* (fb/navigation=)
              blaze.core/*settings* (fb/settings=)
              blaze.core/*categories* (fb/categories=)
              blaze.core/*posts* (fb/posts=)
              blaze.core/*featured-post* (fb/posts-featured=)
              blaze.core/*router* bidi/route!]
      ;; Lexically Scoped Variables (cross thread)
      (let [router blz/*router*
            route-params blz/*route-params*
            prefix bidi/*prefix*
            categories blz/*categories*
            posts blz/*posts*
            current-post (cell= (hfb/fbonce-cell (fbdb/get-in (fb/post) [(keyword (:id route-params))])))
            about-settings (cell= (-> blz/*settings* :cards :about))
            featured-post (cell= (first (seq blz/*featured-post*)))
            featured-id (cell= (first featured-post))
            featured-meta (cell= (second featured-post))]
            ;(cell= (prn ~(hfb/fbonce-cell (fb/post))))
            (cell= (prn current-post))
        ;; MDL Layout
        (layout/layout
          :class [:demo-blog :demo-blog--blogpost]
          :drawer-button true
          :desktop-drawer-button true
          ;; MDL Header
          (layout/layout-header
            :scroll true
            :transparent true
            (layout/header-row
              (layout/layout-spacer)
              (bmdl/navigation :router #(router % :prefix prefix))))
          ;; MDL Drawer
          (layout/layout-drawer
            (bmdl/navigation :router #(router % :prefix prefix)))
          ;; MDL Content
          (layout/layout-content
            ;; Route Templating (each view is an individual thread, ie. local bindings)
            (route-tpl (bidi/routes)
              ;; Landing View
              :index
                (binding [grid/*cols*   12
                          grid/*shadow* 2]
                  (let []
                    (grid/grid
                      :class [:demo-blog__posts]
                      (bmdl/about-card
                        :title (cell= (:title about-settings))
                        :image (cell= (:image about-settings))
                        :desktop-cols 4)
                      (bmdl/featured-card
                        :click #(router :post :id @featured-id :prefix prefix)
                        :title (cell= (:title featured-meta))
                        :image (cell= (:image featured-meta))
                        :color (cell= (:color featured-meta))
                        :desktop-cols 8)
                      (bmdl/preview-card)
                      (bmdl/preview-card))))
              ;; Categories View
              :categories
                (binding [grid/*cols*   12
                          grid/*shadow* 2]
                  (grid/grid
                    :class [:demo-blog__list]
                    (bmdl/list-card
                      :title "Categories:"
                      :items categories
                      :router #(router :category :id % :prefix prefix))))
              ;; Category View
              :category
                (binding [grid/*cols*   12
                          grid/*shadow* 2]
                  (grid/grid
                    :class [:demo-blog__posts]))
              ;; Posts View
              :posts
                (binding [grid/*cols*   12
                          grid/*shadow* 2]
                  (grid/grid
                    :class [:demo-blog__list]
                    (bmdl/list-card
                      :title "All Posts:"
                      :items posts
                      :router #(router :post :id % :prefix prefix))))
              ;; Post View
              :post
                (binding [grid/*cols*   12
                          grid/*shadow* 2]
                  (grid/grid
                    :class [:demo-blog__posts]
                    (bmdl/post-card
                      :post current-post))))
          (footer/mini-footer)))))))
